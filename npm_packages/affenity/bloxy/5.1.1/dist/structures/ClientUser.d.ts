import Client from "../client";
import { PartialUser } from "./User";
import { UpdateContactUpsellSuppressionOptions, UpdateTwoStepStatusOptions, UpdateUserPrivacyOptions, UpdateUserPromotionChannelsOptions } from "../client/apis/AccountSettingsAPI";
import { DeletePhoneOptions, ResendPhoneCodeOptions, SetPhoneNumberOptions, UpdateUserBirthdateOptions, VerifyPhoneOptions } from "../client/apis/AccountInformationAPI";
export interface ClientUserOptions {
    id: number;
    name: string;
}
export default class ClientUser extends PartialUser {
    client: Client;
    constructor(data: ClientUserOptions, client: Client);
    getAppChatPrivacy(): Promise<import("../client/apis/AccountSettingsAPI").GetAppChatPrivacy>;
    updateAppChatPrivacy(privacy: string): Promise<boolean>;
    getGameChatPrivacy(): Promise<import("../client/apis/AccountSettingsAPI").GetGameChatPrivacy>;
    updateGameChatPrivacy(privacy: string): Promise<boolean>;
    getInventoryPrivacy(): Promise<import("../client/apis/AccountSettingsAPI").GetInventoryPrivacy>;
    updateInventoryPrivacy(privacy: string): Promise<import("../client/apis/AccountSettingsAPI").UpdateInventoryPrivacy>;
    getPrivacy(): Promise<import("../client/apis/AccountSettingsAPI").GetUserPrivacy>;
    updatePrivacy(options: UpdateUserPrivacyOptions): Promise<import("../client/apis/AccountSettingsAPI").UpdateUserPrivacy>;
    getPrivacySettingsInfo(): Promise<import("../client/apis/AccountSettingsAPI").GetUserPrivacySettingsInfo>;
    getPrivateMessagePrivacy(): Promise<import("../client/apis/AccountSettingsAPI").GetUserPrivateMessagePrivacy>;
    updatePrivateMessagePrivacy(privacy: string): Promise<boolean>;
    getEmailStatus(): Promise<import("../client/apis/AccountSettingsAPI").GetUserEmailStatus>;
    updateEmail(email: string, password: string): Promise<boolean>;
    sendEmailVerification(): Promise<boolean>;
    getWebsiteTheme(): Promise<import("../client/apis/AccountSettingsAPI").GetWebsiteTheme>;
    updateWebsiteTheme(theme: string): Promise<boolean>;
    getTradePrivacy(): Promise<import("../client/apis/AccountSettingsAPI").GetUserTradePrivacy>;
    updateTradePrivacy(privacy: string): Promise<import("../client/apis/AccountSettingsAPI").UpdateUserTradePrivacy>;
    getTradeQualityFilter(): Promise<import("../client/apis/AccountSettingsAPI").GetUserTradeQualityFilter>;
    updateTradeQualityFilter(quality: string): Promise<boolean>;
    getTwoStepStatus(): Promise<import("../client/apis/AccountSettingsAPI").GetTwoStepStatus>;
    updateTwoStepStatus(options: UpdateTwoStepStatusOptions): Promise<import("../client/apis/AccountSettingsAPI").UpdateTwoStepStatus>;
    getContactUpsell(): Promise<import("../client/apis/AccountSettingsAPI").GetContactUpsell>;
    updateContactUpsellSuppression(options: UpdateContactUpsellSuppressionOptions): Promise<boolean>;
    updatePromotionChannels(options: UpdateUserPromotionChannelsOptions): Promise<boolean>;
    getBirthdate(): Promise<import("../client/apis/AccountInformationAPI").GetUserBirthdate>;
    updateBirthdate(options: UpdateUserBirthdateOptions): Promise<boolean>;
    getProfileDescription(): Promise<import("../client/apis/AccountInformationAPI").GetUserDescription>;
    updateProfileDescription(description: string): Promise<boolean>;
    getGender(): Promise<import("../client/apis/AccountInformationAPI").GetUserGender>;
    updateGender(gender: number): Promise<unknown>;
    getConsecutiveXboxLoginDays(): Promise<import("../client/apis/AccountInformationAPI").GetConsecutiveXboxLoginDays>;
    getVerifiedPhoneNumber(): Promise<SetPhoneNumberOptions>;
    setPhoneNumber(options: SetPhoneNumberOptions): Promise<unknown>;
    deletePhone(options: DeletePhoneOptions): Promise<unknown>;
    resendPhoneCode(options: ResendPhoneCodeOptions): Promise<unknown>;
    verifyPhone(options: VerifyPhoneOptions): Promise<unknown>;
    getPromotionChannels(): Promise<import("../client/apis/AccountInformationAPI").UpdateUserPromotionChannelsOptions>;
    removeStarCodeAffiliate(): Promise<unknown>;
    getStarCodeAffiliate(): Promise<import("../client/apis/AccountInformationAPI").GetStarCodeAffiliate>;
    addStarCodeAffiliate(code: string): Promise<import("../client/apis/AccountInformationAPI").GetStarCodeAffiliate>;
    getPasswordStatus(): Promise<import("../client/apis/AuthAPI").GetCurrentPasswordStatus>;
    changeUserPassword(newPassword: string, oldPassword: string): Promise<unknown>;
    changeUsername(newUsername: string, password: string): Promise<unknown>;
}
