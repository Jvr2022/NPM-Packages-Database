import BaseAPI from "./BaseAPI";
import Client from "../Client";
export type GetAssetsThumbnailsOptions = {
    assetIds: number[];
    returnPolicy?: "PlaceHolder" | "AutoGenerated" | "ForceAutoGenerated";
    size?: "42x42" | "50x50" | "75x75" | "110x110" | "140x140" | "150x150" | "160x100" | "160x600" | "250x250" | "256x144" | "300x250" | "304x166" | "384x216" | "396x216" | "420x420" | "480x270" | "512x512" | "576x324" | "700x700" | "728x90" | "768x432";
    format?: "png" | "jpg";
    isCircular?: boolean;
};
export type GetAssetsThumbnails = {
    data: {
        targetId: number;
        state: "Error" | string;
        imageUrl: string;
    }[];
};
export type GetBadgesIconsOptions = {
    badgeIds: number[];
    size?: "150x150";
    format?: "png" | "jpg";
    isCircular?: boolean;
};
export type GetBadgesIcons = GetAssetsThumbnails;
export type GetBundlesThumbnailsOptions = {
    bundleIds: number[];
    size?: "150x150" | "420x420";
    format?: "png" | "jpg";
    isCircular?: boolean;
};
export type GetBundlesThumbnails = GetAssetsThumbnails;
export type GetDeveloperProductsIconsOptions = {
    developerProductIds: number[];
    size?: "150x150" | "420x420";
    format?: "png" | "jpg";
    isCircular?: boolean;
};
export type GetDeveloperProductsIcons = GetAssetsThumbnails;
export type GetGamePassesIconsOptions = {
    gamePassIds: number[];
    size?: "150x150";
    format?: "png" | "jpg";
    isCircular?: boolean;
};
export type GetGamePassesIcons = GetAssetsThumbnails;
export type GetUniverseThumbnailsOptions = {
    universeId: number;
    thumbnailIds: number[];
    size?: "768x432" | "576x324" | "480x270" | "384x216" | "256x144";
    format?: "png" | "jpg";
    isCircular?: boolean;
};
export type GetUniverseThumbnails = GetAssetsThumbnails;
export type GetUniversesRootPlaceThumbnailsOptions = {
    universeIds: number[];
    returnPolicy?: "PlaceHolder" | "AutoGenerated" | "ForceAutoGenerated";
    size?: "50x50" | "128x128" | "150x150" | "256x256" | "512x512";
    format?: "png" | "jpg";
    isCircular?: boolean;
};
export type GetUniversesRootPlaceThumbnails = GetAssetsThumbnails;
export type GetUniversesThumbnailsOptions = {
    universeIds: number[];
    countPerUniverse?: number;
    defaults?: boolean;
    size?: "768x432" | "576x324" | "480x270" | "384x216" | "256x144";
    format?: "png" | "jpg";
    isCircular?: boolean;
};
export type GetUniversesThumbnails = {
    data: {
        universeId: number;
        error?: {
            code: number;
            message: string;
            userFacingMessage: string;
            field: string;
            fieldData: unknown;
        };
        thumbnails: {
            targetId: number;
            state: "Error" | string;
            imageUrl: string;
        }[];
    }[];
};
export type GetGroupsIconsOptions = {
    groupIds: number[];
    size?: "150x150" | "420x420";
    format?: "png" | "jpg";
    isCircular?: boolean;
};
export type GetGroupsIcons = GetAssetsThumbnails;
export type GetUsersFullBodyAvatarImagesOptions = {
    userIds: number[];
    size?: "30x30" | "48x48" | "60x60" | "75x75" | "100x100" | "140x140" | "150x150" | "150x200" | "180x180" | "250x250" | "352x352" | "420x420" | "720x720";
    format?: "png" | "jpg";
    isCircular?: boolean;
};
export type GetUsersFullBodyAvatarImages = GetAssetsThumbnails;
export type GetUsersAvatarBustImagesOptions = {
    userIds: number[];
    size?: "50x50" | "60x60" | "75x75";
    format?: "png" | "jpg";
    isCircular?: boolean;
};
export type GetUsersAvatarBustImages = GetAssetsThumbnails;
export type GetUsersAvatarHeadShotsImagesOptions = {
    userIds: number[];
    size?: "48x48" | "50x50" | "60x60" | "75x75" | "110x110" | "150x150" | "180x180" | "352x352" | "420x420" | "720x720";
    format?: "png" | "jpg";
    isCircular?: boolean;
};
export type GetUsersAvatarHeadShotsImages = GetAssetsThumbnails;
export type GetUsersOutfitsImagesOptions = {
    userOutfitIds: number[];
    size?: "150x150" | "420x420";
    format?: "png" | "jpg";
    isCircular?: boolean;
};
export type GetUsersOutfitsImages = GetAssetsThumbnails;
export type GetBatchImagesOptions = {
    requestId: string;
    targetId: number;
    type: "Avatar" | "AvatarHeadShot" | "GameIcon" | "BadgeIcon" | "GameThumbnail" | "GamePass" | "Asset" | "BundleThumbnail" | "Outfit" | "GroupIcon" | "DeveloperProduct" | "AutoGeneratedAsset";
    size: string;
    isCircular: boolean;
};
export type GetBatchImages = {
    data: {
        requestId: string;
        errorCode?: number;
        errorMessage?: string;
        targetId: number;
        state: "Error" | string;
        imageUrl: string;
    }[];
};
export default class ThumbnailsAPI extends BaseAPI {
    constructor(client: Client);
    getAssetsThumbnails(options: GetAssetsThumbnailsOptions): Promise<GetAssetsThumbnails>;
    getBadgesIcons(options: GetBadgesIconsOptions): Promise<GetBadgesIcons>;
    getBundlesThumbnails(options: GetBundlesThumbnailsOptions): Promise<GetBundlesThumbnails>;
    getDeveloperProductIcons(options: GetDeveloperProductsIconsOptions): Promise<GetDeveloperProductsIcons>;
    getGamePassesIcons(options: GetGamePassesIconsOptions): Promise<GetGamePassesIcons>;
    getUniverseThumbnailIds(options: GetUniverseThumbnailsOptions): Promise<GetUniverseThumbnails>;
    getUniversesRootPlaceThumbnail(options: GetUniversesRootPlaceThumbnailsOptions): Promise<GetUniversesRootPlaceThumbnails>;
    getUniversesThumbnailIds(options: GetUniversesThumbnailsOptions): Promise<GetUniversesThumbnails>;
    getGroupsIcons(options: GetGroupsIconsOptions): Promise<GetGroupsIcons>;
    getUsersFullBodyAvatarImages(options: GetUsersFullBodyAvatarImagesOptions): Promise<GetUsersFullBodyAvatarImages>;
    getUsersAvatarBustImages(options: GetUsersAvatarBustImagesOptions): Promise<GetUsersAvatarBustImages>;
    getUsersAvatarHeadShotImages(options: GetUsersAvatarHeadShotsImagesOptions): Promise<GetUsersAvatarHeadShotsImages>;
    getUsersOutfitsImages(options: GetUsersOutfitsImagesOptions): Promise<GetUsersOutfitsImages>;
    getBatchImages(options: GetBatchImagesOptions): Promise<GetBatchImages>;
}
